{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PUBLIC_URL","Feature","title","description","icon","className","height","Link","props","color","Emphasize","children","Step","number","label","image","links","alt","src","map","link","Title","style","margin","Setup","href","Requirements","faBook","faShip","faCheck","maxHeight","Topic","name","subtopics","subtopic","Questions","App","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddc8eff8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Deck, Slide } from \"spectacle\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBook,\n  faShip,\n  faCheck\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst PUBLIC_URL = \"https://sugarmanz.github.io/kotlin-tooling-presentation/\"\n\nconst Feature = ({ title, description, icon }) => (\n  <div className=\"mb-8 flex items-start last:mb-0\">\n    <div className=\"rounded bg-yellow-500 p-3 text-yellow-100 mr-5\">\n      <FontAwesomeIcon height={24} icon={icon} />\n    </div>\n    <div>\n      <h3 className=\"text-xl font-semibold mb-2\">{title}</h3>\n      <p className=\"text-lg text-gray-700\">{description}</p>\n    </div>\n  </div>\n);\n\nconst Link = props => (\n  <a {...props}><span className={`text-${props.color ?? \"blue\"}-600 font-semibold underline`} {...props} /></a>\n);\n\nconst Emphasize = ({ children, className }) => (\n  <span className={`text-purple-500 font-semibold ${className}`}>\n    {children}\n  </span>\n);\n\nconst Step = ({ number, label, image, links }) => (\n  <div className=\"flex items-center justify-center flex-col mb-8 w-full h-full\">\n    <div className=\"pr-4 mb-6 text-5xl text-gray-900 mx-20 text-center\">\n      {label}\n    </div>\n\n    <img\n      alt=\"\"\n      className=\"max-w-4xl border-2 border-gray-300 rounded-lg h-auto\"\n      src={`${PUBLIC_URL}/${image}`}\n    />\n\n    <br />\n\n    {links && <div className=\"flex flex-col max-w-4xl justify-left items-left text-2xl\">\n      {links.map(link => (<div><Emphasize>- {link}</Emphasize></div>))}\n    </div>}\n  </div>\n);\n\nexport const Label = ({ children, color, size = \"xl\" }) => (\n  <span\n    className={`bg-${color}-600 text-white px-2 py-1 rounded font-semibold text-${size} align-middle`}\n  >\n    {children}\n  </span>\n);\n\nexport const FrequentlyAskedQuestion = ({ question, answer }) => (\n  <div className=\"mx-20 h-full flex flex-col justify-center\">\n    <h4 className=\"font-normal text-6xl mb-6 text-gray-700\">{question}</h4>\n    <p className=\"text-grey-800 text-3xl leading-relaxed\">{answer}</p>\n  </div>\n);\n\nconst Title = () => (\n  <div\n    className=\"bg-indigo-600 w-full h-full flex justify-center flex-col items-center text-center absolute\"\n    style={{ margin: -32 }}\n  >\n    <h1 className=\"text-6xl font-bold text-white\">Publishing a Kotlin Library</h1>\n\n    <p className=\"text-2xl text-purple-200 font-light\">\n      We know the language is awesome, but what about{\" \"}\n      <span className=\"text-yellow-500 font-semibold\">publication tooling?</span>\n    </p>\n    {/* TODO: Maybe reframe to how to publish quality software? */}\n  </div>\n);\n\nconst Setup = () => (\n  <div className=\"mt-10 lg:mb-24 text-center flex items-center justify-center flex-col h-full\">\n    <h2 className=\"text-purple-900 text-4xl mb-12 mx-32 font-semibold\">\n      Using a cool language shouldn't come at the expense of quality tools\n    </h2>\n\n\n    <p className=\"max-w-2xl text-2xl text-gray-700\">\n      Thankfully, the <Emphasize>Kotlin</Emphasize> community considers tooling\n      to be an integral part of the language ecosystem. Let's take a look at\n      some of the tooling I discovered and was able to use for the{\" \"}\n      <Link href=\"https://intuit.github.io/hooks\">Hooks</Link> project.\n    </p>\n  </div>\n);\n\nconst Requirements = () => (\n  <div className=\"mt-10 lg:mb-24 flex items-center justify-center flex-col h-full\">\n    <h2 className=\"text-purple-900 text-4xl mb-12 mx-32 font-semibold\">\n      What are we aiming for?\n    </h2>\n    <div className=\"h-full flex justify-around items-center flex-row text-gray-900\">\n      <div className=\"flex-1 lg:px-12\">\n        <Feature\n          title=\"Quality Documentation\"\n          icon={faBook}\n          description=\"For libraries that are consumed and expose an API, usage docs and API\n            docs are important to ensure your code can be used without frustration!\"\n        // Dokka for API docs\n        // Orchid for usage docs\n        // Testing documentation knit\n        />\n\n        <Feature\n          title=\"Stable Releases\"\n          icon={faShip}\n          description=\"Protect your consumers from errant releases and ensure releases follow\n            strict versioning patterns.\"\n        // Auto\n        // binary compatibility\n        />\n\n        <Feature\n          title=\"Maintainability & Open Source Readiness\"\n          icon={faCheck}\n          description=\"Set the project up for success by defining & enforcing standards to\n            follow when making a contribution. This includes formatting, testing, documentation...\"\n        // ktlint\n        // detekt\n        // license check on PR\n        />\n      </div>\n\n      {/* TODO: Maybe simple pipeline? */}\n\n      <div className=\"flex-1 px-12 mb-20 lg:mb-0\">\n        <img\n          src={`${PUBLIC_URL}/documentation.png`}\n          alt=\"documentation example\"\n          className=\"border border-grey-600 rounded-lg p-4 shadow-md\"\n          style={{ maxHeight: 500 }}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nconst Topic = ({ name, subtopics = [] }) => (\n  <div\n    className=\"bg-indigo-600 w-full h-full flex justify-center flex-col items-center absolute\"\n    style={{ margin: -32 }}\n  >\n    <h1 className=\"text-6xl font-bold text-white\">{name}</h1>\n\n    <p className=\"text-2xl text-yellow-500 font-semibold\">\n      <ul>\n        {subtopics.map(subtopic => <li>- {subtopic}</li>)}\n      </ul>\n    </p>\n  </div>\n);\n\nconst Questions = () => (\n  <div\n    className=\"bg-indigo-600 w-full h-full flex justify-center flex-col items-center text-center absolute\"\n    style={{ margin: -32 }}\n  >\n    <h1 className=\"text-6xl font-bold text-white\">Questions?</h1>\n\n    <p className=\"text-2xl text-purple-200 font-light\">\n      Slides are posted to <Link href=\"https://sugarmanz.github.io/kotlin-tooling-presentation\" color=\"yellow\">https://sugarmanz.github.io/kotlin-tooling-presentation</Link>\n    </p>\n  </div>\n);\n\nfunction App() {\n  // title\n  // setup\n  // requirements\n  // 1. documentation\n  // 1a. dokka - api docs\n  // 1b. orchid - usage docs (markdown)\n  // 1c. knit - testing your usage docs\n  // 2. publishing\n  // 2a. auto (not really kotlin, but...)\n  // 2b. binary compatibility\n  // 2c. deprecation\n  // 3. OSS\n  // 3a. ktlint\n  // 3b. detekt\n  // 3c. fossa\n  // maybe brief sonatype preview?\n  // 4. intuit OSS process?\n  // 5. questions? \n  return (\n    <Deck>\n      <Slide>\n        <Title />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Setup />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Requirements />\n      </Slide>\n\n      <Slide>\n        <Topic name=\"Documentation\" subtopics={[\"API Docs\", \"Usage Docs\", \"Doc Verification\"]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"API Docs: Dokka\" image=\"dokka.png\" links={[\n          <Link href=\"https://kotlinlang.org/docs/kotlin-doc.html\">KDoc Reference</Link>,\n          <Link href=\"https://intuit.github.io/hooks/kotlindoc/hooks/com/intuit/hooks/\">Hooks API Docs</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Usage Docs: Orchid\" image=\"orchid.png\" links={[\n          <Link href=\"https://orchid.run/\">Orchid Reference</Link>,\n          <Link href=\"https://intuit.github.io/hooks/\">Hooks Docs Site</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Docs Verification: Kotlinx Knit\" image=\"knit.png\" links={[\n          <Link href=\"https://github.com/Kotlin/kotlinx-knit\">Kotlinx Knit Github</Link>,\n          <Link href=\"https://github.com/intuit/hooks/tree/master/docs/src/test/kotlin/example/example-synchook-01.kt\">example-synchook-01.kt</Link>,\n        ]} />\n      </Slide>\n\n      <Slide>\n        <Topic name=\"Releases\" subtopics={[\"Semantic Versioning w/ Auto\", \"Binary Compatibility\", \"Deprecation\"]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Semantic Versioning w/ Auto\" image=\"auto.png\" links={[\n          <Link href=\"https://github.com/intuit/auto\">Auto Github</Link>,\n          <Link href=\"https://intuit.github.io/hooks/changelog/\">Hooks Changelog</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Binary Compatibility\" image=\"api.png\" links={[\n          <Link href=\"https://github.com/Kotlin/binary-compatibility-validator\">Binary Compatibility Validator Github</Link>,\n          <Link href=\"https://github.com/intuit/hooks/blob/main/hooks/api/hooks.api\">Hooks API</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Deprecation\" image=\"deprecation-replace.png\" links={[\n          <Link href=\"https://todd.ginsberg.com/post/kotlin/deprecation/\">\"Enhanced Deprecation in Kotlin\"</Link>,\n        ]} />\n      </Slide>\n\n      <Slide>\n        <Topic name=\"Maintainability\" subtopics={[\"Linting\", \"Static Analysis\", \"Contributions\"]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"ktlint\" image=\"ktlint.png\" links={[\n          <Link href=\"https://github.com/pinterest/ktlint\">ktlint Github</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"detekt\" image=\"detekt.png\" links={[\n          <Link href=\"https://github.com/detekt/detekt\">detekt Github</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"License Check: Fossa\" image=\"fossa.png\" links={[\n          <Link href=\"https://fossa.com/\">Fossa</Link>,\n          <Link href=\"https://app.fossa.com/projects/custom%2B23410%2Fgit%40github.com%3Aintuit%2Fhooks/refs/branch/master/a1a5365b7e6c686b7026d48ff63c30a4f80b30ca/preview\">Hooks Fossa Report</Link>\n        ]} />\n      </Slide>\n\n      <Slide>\n        <Topic name=\"Bonus\" subtopics={[\"Simple Pipeline\", \"Minimal Configuration\", \"Intuit OSS Guidelines\"]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Simple Pipeline\" image=\"pipeline.png\" links={[\n          <Link href=\"https://github.com/intuit/hooks/blob/main/.circleci/config.yml\">Hooks Circle CI Pipeline</Link>,\n          <Link href=\"https://github.com/intuit/hooks/blob/main/build.gradle.kts#L62\">Hooks Gradle Publish Task</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Sonatype Configuration\" image=\"sonatype.png\" links={[\n          <Link href=\"https://github.com/gradle-nexus/publish-plugin\">Gradle Nexus Publish Plugin Github</Link>,\n          <Link href=\"https://github.com/intuit/hooks/blob/main/build.gradle.kts#L48\">Sonatype Plugin Configuration</Link>,\n          <Link href=\"https://issues.sonatype.org/browse/OSSRH-65077\">Sonatype JIRA Ticket</Link>,\n        ]} />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Intuit OSS Process\" image=\"oss.png\" links={[\n          <Link href=\"https://github.intuit.com/pages/open-source/OSSContributionProcess/\">Intuit OSS Contribution Process</Link>,\n        ]} />\n      </Slide>\n\n      <Slide>\n        <Questions />\n      </Slide>\n    </Deck>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}