{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PUBLIC_URL","Feature","title","description","icon","className","height","Link","href","props","color","Emphasize","children","Step","number","label","image","links","alt","src","style","maxHeight","map","link","Title","margin","Setup","Description","Tenets","Topic","name","subtopics","subtopic","Questions","App","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAKMA,EAAa,kEAEbC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,KAAvB,OACd,yBAAKC,UAAU,mCACb,yBAAKA,UAAU,kDACb,kBAAC,IAAD,CAAiBC,OAAQ,GAAIF,KAAMA,KAErC,6BACE,wBAAIC,UAAU,8BAA8BH,GAC5C,uBAAGG,UAAU,yBAAyBF,MAKtCI,EAAO,SAAC,GAAD,MAAGC,EAAH,EAAGA,KAASC,EAAZ,+BACX,uBAAGD,KAAMA,GAAM,wCAAMH,UAAS,yBAAUI,EAAMC,aAAhB,QAAyB,OAAzB,iCAAmED,MAG7FE,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUP,EAAb,EAAaA,UAAb,OAChB,0BAAMA,UAAS,wCAAmCA,IAC/CO,IAICC,EAAO,SAAC,GAAD,EAAGC,OAAH,IAAWC,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,MAAOL,EAAhC,EAAgCA,SAAhC,OACX,yBAAKP,UAAU,gEACb,yBAAKA,UAAU,sDACZU,GAMFH,EAED,yBACEM,IAAI,GACJb,UAAU,uDACVc,IAAG,UAAKnB,EAAL,YAAmBgB,GACtBI,MAAO,CAAEC,UAAW,OAGtB,6BAECJ,GAAS,yBAAKZ,UAAU,4DACtBY,EAAMK,KAAI,SAAAC,GAAI,OAAK,6BAAK,kBAAC,EAAD,UAAcA,UAoBvCC,EAAQ,kBACZ,yBACEnB,UAAU,6FACVe,MAAO,CAAEK,QAAS,KAElB,wBAAIpB,UAAU,iCAAd,wBAEA,uBAAGA,UAAU,uCAAb,0DAC0D,IACxD,kBAAC,EAAD,CAAMG,KAAK,kDAAkDE,MAAM,UAAnE,yBAFF,OAOEgB,EAAQ,kBACZ,yBAAKrB,UAAU,+EACb,wBAAIA,UAAU,sDAAd,oDAKA,uBAAGA,UAAU,oCAAb,8OAIsB,kBAAC,EAAD,eAJtB,4CAcEsB,EAAc,SAAC,GAAD,IAAGf,EAAH,EAAGA,SAAH,OAClB,uBAAGP,UAAU,8BAA8BO,IAsDvCgB,EAAS,kBACb,yBAAKvB,UAAU,mEACb,wBAAIA,UAAU,sDAAd,4CAGA,yBAAKA,UAAU,kEACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEH,MAAM,iCAENC,YAAY,2GAGd,kBAAC,EAAD,CACED,MAAM,gBAENC,YAAY,wFAGd,kBAAC,EAAD,CACED,MAAM,cAENC,YAAY,uJAGd,kBAAC,EAAD,CACED,MAAM,kBAENC,YAAY,iFAIhB,yBAAKE,UAAU,8BACb,yBACEc,IAAG,UAAKnB,EAAL,eACHkB,IAAI,sBACJb,UAAU,kDACVe,MAAO,CAAEC,UAAW,WAOxBQ,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,iBAAT,MAAqB,GAArB,SACZ,yBACE1B,UAAU,iFACVe,MAAO,CAAEK,QAAS,KAElB,wBAAIpB,UAAU,iCAAiCyB,GAE/C,uBAAGzB,UAAU,0CACX,4BACG0B,EAAUT,KAAI,SAAAU,GAAQ,OAAI,iCAAOA,UAMpCC,EAAY,kBAChB,yBACE5B,UAAU,6FACVe,MAAO,CAAEK,QAAS,KAElB,wBAAIpB,UAAU,iCAAd,cAEA,uBAAGA,UAAU,uCAAb,wBACuB,kBAAC,EAAD,CAAMG,KAAK,iEAAiEE,MAAM,UAAlF,qEA6GZwB,MAxGf,WA0BE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOC,gBAAgB,SACrB,kBAAC,EAAD,OAMF,kBAAC,IAAD,CAAOA,gBAAgB,SACrB,kBAAC,EAAD,OAGF,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOL,KAAK,wBAAwBC,UAAW,CAAC,SAAU,qBAAsB,cAQlF,kBAAC,IAAD,CAAOI,gBAAgB,SACrB,kBAAC,EAAD,CAAMpB,MAAM,SAASC,MAAM,eAAeC,MAAO,CAC/C,kBAAC,EAAD,CAAMT,KAAK,2FAAX,yBAEA,kBAAC,EAAD,0EAaJ,kBAAC,IAAD,CAAO2B,gBAAgB,SACrB,kBAAC,EAAD,CAAMpB,MAAM,cAAcC,MAAM,aAAaC,MAAO,CAClD,kBAAC,EAAD,CAAMT,KAAK,uGAAX,uBACA,kBAAC,EAAD,CAAMA,KAAK,+GAAX,gCACA,kBAAC,EAAD,CAAMA,KAAK,uHAAX,2BAUJ,kBAAC,IAAD,CAAO2B,gBAAgB,SACrB,kBAAC,EAAD,CAAMpB,MAAM,qBAAqBC,MAAM,wBAAwBC,MAAO,CACpE,kBAAC,EAAD,CAAMT,KAAK,sGAAX,wBACC,kBAAC,EAAD,gFAGL,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOsB,KAAK,+BAGd,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOA,KAAK,QAAQC,UAAW,CAAC,eAAgB,qBAGlD,kBAAC,IAAD,KACE,kBAAC,EAAD,SC9TYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8f42021.chunk.js","sourcesContent":["import React from \"react\";\nimport { Deck, Slide } from \"spectacle\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst PUBLIC_URL = \"https://sugarmanz.github.io/kotlinx-serialization-presentation/\"\n\nconst Feature = ({ title, description, icon }) => (\n  <div className=\"mb-8 flex items-start last:mb-0\">\n    <div className=\"rounded bg-yellow-500 p-3 text-yellow-100 mr-5\">\n      <FontAwesomeIcon height={24} icon={icon} />\n    </div>\n    <div>\n      <h3 className=\"text-xl font-semibold mb-2\">{title}</h3>\n      <p className=\"text-lg text-gray-700\">{description}</p>\n    </div>\n  </div>\n);\n\nconst Link = ({ href, ...props }) => (\n  <a href={href}><span className={`text-${props.color ?? \"blue\"}-600 font-semibold underline`} {...props} /></a>\n);\n\nconst Emphasize = ({ children, className }) => (\n  <span className={`text-purple-500 font-semibold ${className}`}>\n    {children}\n  </span>\n);\n\nconst Step = ({ number, label, image, links, children }) => (\n  <div className=\"flex items-center justify-center flex-col mb-8 w-full h-full\">\n    <div className=\"pr-4 mb-6 text-5xl text-gray-900 mx-20 text-center\">\n      {label}\n    </div>\n\n    {/* {description && <p className=\"text-2xl text-purple-200 font-light\">\n      description\n    </p>} */}\n    {children}\n\n    <img\n      alt=\"\"\n      className=\"max-w-4xl border-2 border-gray-300 rounded-lg h-auto\"\n      src={`${PUBLIC_URL}/${image}`}\n      style={{ maxHeight: 500 }}\n    />\n\n    <br />\n\n    {links && <div className=\"flex flex-col max-w-4xl justify-left items-left text-2xl\">\n      {links.map(link => (<div><Emphasize>- {link}</Emphasize></div>))}\n    </div>}\n  </div>\n);\n\nexport const Label = ({ children, color, size = \"xl\" }) => (\n  <span\n    className={`bg-${color}-600 text-white px-2 py-1 rounded font-semibold text-${size} align-middle`}\n  >\n    {children}\n  </span>\n);\n\nexport const FrequentlyAskedQuestion = ({ question, answer }) => (\n  <div className=\"mx-20 h-full flex flex-col justify-center\">\n    <h4 className=\"font-normal text-6xl mb-6 text-gray-700\">{question}</h4>\n    <p className=\"text-grey-800 text-3xl leading-relaxed\">{answer}</p>\n  </div>\n);\n\nconst Title = () => (\n  <div\n    className=\"bg-indigo-600 w-full h-full flex justify-center flex-col items-center text-center absolute\"\n    style={{ margin: -32 }}\n  >\n    <h1 className=\"text-6xl font-bold text-white\">Kotlin Serialization</h1>\n\n    <p className=\"text-2xl text-purple-200 font-light\">\n      With all the existing JVM serialization frameworks, why{\" \"}\n      <Link href=\"https://github.com/kotlin/kotlinx.serialization\" color=\"yellow\">kotlinx.serialization</Link>?\n    </p>\n  </div>\n);\n\nconst Setup = () => (\n  <div className=\"mt-10 lg:mb-24 text-center flex items-center justify-center flex-col h-full\">\n    <h2 className=\"text-purple-900 text-4xl mb-12 mx-32 font-semibold\">\n      Choosing a serialization framework can be tricky\n    </h2>\n\n\n    <p className=\"max-w-2xl text-2xl text-gray-700\">\n      From my own experience, this usually ends up being an opinionated\n      decision, heavily favoring whatever solution the team is most experienced\n      with. Recently, I've had the opportunity to explore the idiomatic approach\n      to serialization in <Emphasize>Kotlin</Emphasize> and am excited to share\n      my learnings!\n    </p>\n  </div>\n);\n\n// const Competition = () => (\n//   <div></div>\n// )\n\nconst Description = ({ children }) => (\n  <p className=\"text-lg text-gray-700 mb-6\">{children}</p>\n)\n\nexport const Requirements = () => (\n  <div className=\"mt-10 lg:mb-24 flex items-center justify-center flex-col h-full\">\n    <h2 className=\"text-purple-900 text-4xl mb-12 mx-32 font-semibold\">\n      What's already out there?\n    </h2>\n    <div className=\"h-full flex justify-around items-center flex-row text-gray-900\">\n      <div className=\"flex-1 lg:px-12\">\n        <Feature\n          title=\"Gson\"\n          // icon={faBook}\n          description=\"Popular, but JSON only. Unofficially deprecated as it doesn't handle `null` values gracefully.\"\n        />\n\n        <Feature\n          title=\"Jackson\"\n          // icon={faShip}\n          description=\"\"\n        />\n\n        <Feature\n          title=\"Moshi\"\n          // icon={faShip}\n          description=\"JSON only?\"\n        />\n\n        <Feature\n          title=\"Maintainability & Open Source Readiness\"\n          // icon={faCheck}\n          description=\"Set the project up for success by defining & enforcing standards to\n            follow when making a contribution. This includes formatting, testing, documentation...\"\n        // ktlint\n        // detekt\n        // license check on PR\n        />\n      </div>\n\n      {/* TODO: Maybe simple pipeline? */}\n\n      <div className=\"flex-1 px-12 mb-20 lg:mb-0\">\n        <img\n          src={`${PUBLIC_URL}/documentation.png`}\n          alt=\"documentation example\"\n          className=\"border border-grey-600 rounded-lg p-4 shadow-md\"\n          style={{ maxHeight: 500 }}\n        />\n      </div>\n    </div>\n  </div>\n);\n\n\nconst Tenets = () => (\n  <div className=\"mt-10 lg:mb-24 flex items-center justify-center flex-col h-full\">\n    <h2 className=\"text-purple-900 text-4xl mb-12 mx-32 font-semibold\">\n      What does Kotlinx Serialization provide?\n    </h2>\n    <div className=\"h-full flex justify-around items-center flex-row text-gray-900\">\n      <div className=\"flex-1 lg:px-12\">\n        <Feature\n          title=\"Idiomatic Kotlin Serialization\"\n          // icon={faBook}\n          description=\"Fully supports and enforces the Kotlin type system, making sure only valid objects can be deserialized\"\n        />\n\n        <Feature\n          title=\"Multiplatform\"\n          // icon={faShip}\n          description=\"Share data models and serializers between backend, frontend, and anywhere inbetween\"\n        />\n\n        <Feature\n          title=\"Multiformat\"\n          // icon={faCheck}\n          description=\"Official JSON, HOCON, ProtoBuf, CBOR, and Properties formats. Many community-driven formats, i.e. YAML, XML, SharedPreferences, even Minecraft NBT\"\n        />\n\n        <Feature\n          title=\"Compiler Plugin\"\n          // icon={faShip}\n          description=\"Reduce overhead, while still providing strictly typed, accurate serializers\"\n        />\n      </div>\n\n      <div className=\"flex-1 px-12 mb-20 lg:mb-0\">\n        <img\n          src={`${PUBLIC_URL}/tenets.png`}\n          alt=\"basic serialization\"\n          className=\"border border-grey-600 rounded-lg p-4 shadow-md\"\n          style={{ maxHeight: 500 }}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nconst Topic = ({ name, subtopics = [] }) => (\n  <div\n    className=\"bg-indigo-600 w-full h-full flex justify-center flex-col items-center absolute\"\n    style={{ margin: -32 }}\n  >\n    <h1 className=\"text-6xl font-bold text-white\">{name}</h1>\n\n    <p className=\"text-2xl text-yellow-500 font-semibold\">\n      <ul>\n        {subtopics.map(subtopic => <li>- {subtopic}</li>)}\n      </ul>\n    </p>\n  </div>\n);\n\nconst Questions = () => (\n  <div\n    className=\"bg-indigo-600 w-full h-full flex justify-center flex-col items-center text-center absolute\"\n    style={{ margin: -32 }}\n  >\n    <h1 className=\"text-6xl font-bold text-white\">Questions?</h1>\n\n    <p className=\"text-2xl text-purple-200 font-light\">\n      Slides are posted to <Link href=\"https://sugarmanz.github.io/kotlinx-serialization-presentation\" color=\"yellow\">https://sugarmanz.github.io/kotlinx-serialization-presentation</Link>\n    </p>\n  </div>\n);\n\nfunction App() {\n  // title\n  // setup -- problem statement\n  // 1. potential solutions\n  // - Gson\n  // - Jackson\n  // - Moshi\n  // - Kotlinx Serialization\n  // 2. Kotlinx Serialization Tenets\n  //    - Explicit over implicit\n  //    - Format agnostic serializers\n  //    - Compiler plugin\n  //    - Kotlin Multiplatform -- share data models\n  //    - Integrtaions?\n  // 3. Basic Serialization\n  // 4. Built-ins\n  // 5. Serializers \n  //    a. plugin generated\n  //    b. custom\n  // 6. Polymorphism\n  // 7. Formats\n  //    a. Json\n  //    b. others + custom\n  // 8. Questions\n  //    a. Links\n  // 9. Demo?\n  return (\n    <Deck>\n      <Slide>\n        <Title />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Setup />\n      </Slide>\n\n      {/* <Slide backgroundColor=\"white\">\n        <Requirements />\n      </Slide> */}\n      <Slide backgroundColor=\"white\">\n        <Tenets />\n      </Slide>\n\n      <Slide>\n        <Topic name=\"Kotlinx Serialization\" subtopics={[\"Basics\", \"Custom Serializers\", \"Formats\"]} />\n      </Slide>\n\n      {/* \n        1. Distinction, even tho most use cases will only be concerned with serialization\n        2. Backwards, decoding -> deserialization\n        3. No substitute for docs\n      */}\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Basics\" image=\"pipeline.png\" links={[\n          <Link href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md\">Serialization guide</Link>,\n        ]}>\n          <Description>\n            The distinction between serialization and encoding is important\n          </Description>\n        </Step>\n      </Slide>\n\n      {/*\n        1. Most basic built in classes have serializers\n        2. Any class denoted with the Serializable annotation will have a serializer generated\n        3. These serializers are registered on the companion object\n        4. However, formats are able to infer serializer based on expected type\n        5. Generic serializers\n      */}\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Serializers\" image=\"tenets.png\" links={[\n          <Link href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes.md#builtin-classes\">Builtin serializers</Link>,\n          <Link href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#plugin-generated-serializer\">Plugin generated serializers</Link>,\n          <Link href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#plugin-generated-generic-serializer\">Generic serializers</Link>,\n        ]} />\n      </Slide>\n\n      {/* \n        1. More involved for sure\n        2. Powerful way to be able to represent data in different formats\n        3. Well-written custom serializers are still format agnostic\n        4. Throwable serializer\n      */}\n      <Slide backgroundColor=\"white\">\n        <Step label=\"Custom serializers\" image=\"custom-serializer.png\" links={[\n          <Link href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#custom-serializers\">Custom serializers</Link>\n        ]}><Description>Custom serializers require a bit more knowledge of encoding procedure</Description></Step>\n      </Slide>\n\n      <Slide>\n        <Topic name=\"Polymorphic Serialization\" />\n      </Slide>\n\n      <Slide>\n        <Topic name=\"Bonus\" subtopics={[\"package.json\", \"JS runtime ORM\",]} />\n      </Slide>\n\n      <Slide>\n        <Questions />\n      </Slide>\n    </Deck>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}